/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2015-11-16 19:10:01 UTC)
 * on 2016-01-01 at 17:12:42 UTC 
 * Modify at your own risk.
 */

package edu.gatech.cc.lostandfound.api.lostAndFound;

/**
 * Service definition for LostAndFound (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link LostAndFoundRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class LostAndFound extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.21.0 of the lostAndFound library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://myApplicationId.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "lostAndFound/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public LostAndFound(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  LostAndFound(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the FoundReport collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code LostAndFound lostAndFound = new LostAndFound(...);}
   *   {@code LostAndFound.FoundReport.List request = lostAndFound.foundReport().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public FoundReport foundReport() {
    return new FoundReport();
  }

  /**
   * The "foundReport" collection of methods.
   */
  public class FoundReport {

    /**
     * Create a request for the method "foundReport.get".
     *
     * This request holds the parameters needed by the lostAndFound server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Get get(java.lang.Long id) throws java.io.IOException {
      Get result = new Get(id);
      initialize(result);
      return result;
    }

    public class Get extends LostAndFoundRequest<edu.gatech.cc.lostandfound.api.lostAndFound.model.FoundReport> {

      private static final String REST_PATH = "foundReport/{id}";

      /**
       * Create a request for the method "foundReport.get".
       *
       * This request holds the parameters needed by the the lostAndFound server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Get(java.lang.Long id) {
        super(LostAndFound.this, "GET", REST_PATH, null, edu.gatech.cc.lostandfound.api.lostAndFound.model.FoundReport.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public Get setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "foundReport.insert".
     *
     * This request holds the parameters needed by the lostAndFound server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link edu.gatech.cc.lostandfound.api.lostAndFound.model.FoundReport}
     * @return the request
     */
    public Insert insert(edu.gatech.cc.lostandfound.api.lostAndFound.model.FoundReport content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends LostAndFoundRequest<edu.gatech.cc.lostandfound.api.lostAndFound.model.FoundReport> {

      private static final String REST_PATH = "foundReport";

      /**
       * Create a request for the method "foundReport.insert".
       *
       * This request holds the parameters needed by the the lostAndFound server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link edu.gatech.cc.lostandfound.api.lostAndFound.model.FoundReport}
       * @since 1.13
       */
      protected Insert(edu.gatech.cc.lostandfound.api.lostAndFound.model.FoundReport content) {
        super(LostAndFound.this, "POST", REST_PATH, content, edu.gatech.cc.lostandfound.api.lostAndFound.model.FoundReport.class);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "foundReport.list".
     *
     * This request holds the parameters needed by the lostAndFound server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends LostAndFoundRequest<edu.gatech.cc.lostandfound.api.lostAndFound.model.CollectionResponseFoundReport> {

      private static final String REST_PATH = "foundReport";

      /**
       * Create a request for the method "foundReport.list".
       *
       * This request holds the parameters needed by the the lostAndFound server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(LostAndFound.this, "GET", REST_PATH, null, edu.gatech.cc.lostandfound.api.lostAndFound.model.CollectionResponseFoundReport.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String cursor;

      /**

       */
      public java.lang.String getCursor() {
        return cursor;
      }

      public List setCursor(java.lang.String cursor) {
        this.cursor = cursor;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Integer limit;

      /**

       */
      public java.lang.Integer getLimit() {
        return limit;
      }

      public List setLimit(java.lang.Integer limit) {
        this.limit = limit;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "foundReport.patch".
     *
     * This request holds the parameters needed by the lostAndFound server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param id
     * @param content the {@link edu.gatech.cc.lostandfound.api.lostAndFound.model.FoundReport}
     * @return the request
     */
    public Patch patch(java.lang.Long id, edu.gatech.cc.lostandfound.api.lostAndFound.model.FoundReport content) throws java.io.IOException {
      Patch result = new Patch(id, content);
      initialize(result);
      return result;
    }

    public class Patch extends LostAndFoundRequest<edu.gatech.cc.lostandfound.api.lostAndFound.model.FoundReport> {

      private static final String REST_PATH = "foundReport/{id}";

      /**
       * Create a request for the method "foundReport.patch".
       *
       * This request holds the parameters needed by the the lostAndFound server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       * <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @param content the {@link edu.gatech.cc.lostandfound.api.lostAndFound.model.FoundReport}
       * @since 1.13
       */
      protected Patch(java.lang.Long id, edu.gatech.cc.lostandfound.api.lostAndFound.model.FoundReport content) {
        super(LostAndFound.this, "PATCH", REST_PATH, content, edu.gatech.cc.lostandfound.api.lostAndFound.model.FoundReport.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public Patch setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "foundReport.remove".
     *
     * This request holds the parameters needed by the lostAndFound server.  After setting any optional
     * parameters, call the {@link Remove#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Remove remove(java.lang.Long id) throws java.io.IOException {
      Remove result = new Remove(id);
      initialize(result);
      return result;
    }

    public class Remove extends LostAndFoundRequest<Void> {

      private static final String REST_PATH = "foundReport/{id}";

      /**
       * Create a request for the method "foundReport.remove".
       *
       * This request holds the parameters needed by the the lostAndFound server.  After setting any
       * optional parameters, call the {@link Remove#execute()} method to invoke the remote operation.
       * <p> {@link
       * Remove#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Remove(java.lang.Long id) {
        super(LostAndFound.this, "DELETE", REST_PATH, null, Void.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Remove setAlt(java.lang.String alt) {
        return (Remove) super.setAlt(alt);
      }

      @Override
      public Remove setFields(java.lang.String fields) {
        return (Remove) super.setFields(fields);
      }

      @Override
      public Remove setKey(java.lang.String key) {
        return (Remove) super.setKey(key);
      }

      @Override
      public Remove setOauthToken(java.lang.String oauthToken) {
        return (Remove) super.setOauthToken(oauthToken);
      }

      @Override
      public Remove setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Remove) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Remove setQuotaUser(java.lang.String quotaUser) {
        return (Remove) super.setQuotaUser(quotaUser);
      }

      @Override
      public Remove setUserIp(java.lang.String userIp) {
        return (Remove) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public Remove setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Remove set(String parameterName, Object value) {
        return (Remove) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "foundReport.search".
     *
     * This request holds the parameters needed by the lostAndFound server.  After setting any optional
     * parameters, call the {@link Search#execute()} method to invoke the remote operation.
     *
     * @param q
     * @return the request
     */
    public Search search(java.lang.String q) throws java.io.IOException {
      Search result = new Search(q);
      initialize(result);
      return result;
    }

    public class Search extends LostAndFoundRequest<edu.gatech.cc.lostandfound.api.lostAndFound.model.CollectionResponseFoundReport> {

      private static final String REST_PATH = "foundReport/search";

      /**
       * Create a request for the method "foundReport.search".
       *
       * This request holds the parameters needed by the the lostAndFound server.  After setting any
       * optional parameters, call the {@link Search#execute()} method to invoke the remote operation.
       * <p> {@link
       * Search#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param q
       * @since 1.13
       */
      protected Search(java.lang.String q) {
        super(LostAndFound.this, "GET", REST_PATH, null, edu.gatech.cc.lostandfound.api.lostAndFound.model.CollectionResponseFoundReport.class);
        this.q = com.google.api.client.util.Preconditions.checkNotNull(q, "Required parameter q must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Search setAlt(java.lang.String alt) {
        return (Search) super.setAlt(alt);
      }

      @Override
      public Search setFields(java.lang.String fields) {
        return (Search) super.setFields(fields);
      }

      @Override
      public Search setKey(java.lang.String key) {
        return (Search) super.setKey(key);
      }

      @Override
      public Search setOauthToken(java.lang.String oauthToken) {
        return (Search) super.setOauthToken(oauthToken);
      }

      @Override
      public Search setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Search) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Search setQuotaUser(java.lang.String quotaUser) {
        return (Search) super.setQuotaUser(quotaUser);
      }

      @Override
      public Search setUserIp(java.lang.String userIp) {
        return (Search) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String q;

      /**

       */
      public java.lang.String getQ() {
        return q;
      }

      public Search setQ(java.lang.String q) {
        this.q = q;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String cursor;

      /**

       */
      public java.lang.String getCursor() {
        return cursor;
      }

      public Search setCursor(java.lang.String cursor) {
        this.cursor = cursor;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Integer limit;

      /**

       */
      public java.lang.Integer getLimit() {
        return limit;
      }

      public Search setLimit(java.lang.Integer limit) {
        this.limit = limit;
        return this;
      }

      @Override
      public Search set(String parameterName, Object value) {
        return (Search) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "foundReport.test".
     *
     * This request holds the parameters needed by the lostAndFound server.  After setting any optional
     * parameters, call the {@link Test#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Test test(java.lang.Long id) throws java.io.IOException {
      Test result = new Test(id);
      initialize(result);
      return result;
    }

    public class Test extends LostAndFoundRequest<Void> {

      private static final String REST_PATH = "foundReport/test/{id}";

      /**
       * Create a request for the method "foundReport.test".
       *
       * This request holds the parameters needed by the the lostAndFound server.  After setting any
       * optional parameters, call the {@link Test#execute()} method to invoke the remote operation. <p>
       * {@link Test#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Test(java.lang.Long id) {
        super(LostAndFound.this, "GET", REST_PATH, null, Void.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Test setAlt(java.lang.String alt) {
        return (Test) super.setAlt(alt);
      }

      @Override
      public Test setFields(java.lang.String fields) {
        return (Test) super.setFields(fields);
      }

      @Override
      public Test setKey(java.lang.String key) {
        return (Test) super.setKey(key);
      }

      @Override
      public Test setOauthToken(java.lang.String oauthToken) {
        return (Test) super.setOauthToken(oauthToken);
      }

      @Override
      public Test setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Test) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Test setQuotaUser(java.lang.String quotaUser) {
        return (Test) super.setQuotaUser(quotaUser);
      }

      @Override
      public Test setUserIp(java.lang.String userIp) {
        return (Test) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public Test setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Test set(String parameterName, Object value) {
        return (Test) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "foundReport.update".
     *
     * This request holds the parameters needed by the lostAndFound server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param id
     * @param content the {@link edu.gatech.cc.lostandfound.api.lostAndFound.model.FoundReport}
     * @return the request
     */
    public Update update(java.lang.Long id, edu.gatech.cc.lostandfound.api.lostAndFound.model.FoundReport content) throws java.io.IOException {
      Update result = new Update(id, content);
      initialize(result);
      return result;
    }

    public class Update extends LostAndFoundRequest<edu.gatech.cc.lostandfound.api.lostAndFound.model.FoundReport> {

      private static final String REST_PATH = "foundReport/{id}";

      /**
       * Create a request for the method "foundReport.update".
       *
       * This request holds the parameters needed by the the lostAndFound server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       * <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @param content the {@link edu.gatech.cc.lostandfound.api.lostAndFound.model.FoundReport}
       * @since 1.13
       */
      protected Update(java.lang.Long id, edu.gatech.cc.lostandfound.api.lostAndFound.model.FoundReport content) {
        super(LostAndFound.this, "PUT", REST_PATH, content, edu.gatech.cc.lostandfound.api.lostAndFound.model.FoundReport.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public Update setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the MyReports collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code LostAndFound lostAndFound = new LostAndFound(...);}
     *   {@code LostAndFound.MyReports.List request = lostAndFound.myReports().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public MyReports myReports() {
      return new MyReports();
    }

    /**
     * The "myReports" collection of methods.
     */
    public class MyReports {

      /**
       * Create a request for the method "myReports.list".
       *
       * This request holds the parameters needed by the lostAndFound server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @return the request
       */
      public List list() throws java.io.IOException {
        List result = new List();
        initialize(result);
        return result;
      }

      public class List extends LostAndFoundRequest<edu.gatech.cc.lostandfound.api.lostAndFound.model.CollectionResponseFoundReport> {

        private static final String REST_PATH = "foundReport/myReports";

        /**
         * Create a request for the method "myReports.list".
         *
         * This request holds the parameters needed by the the lostAndFound server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @since 1.13
         */
        protected List() {
          super(LostAndFound.this, "GET", REST_PATH, null, edu.gatech.cc.lostandfound.api.lostAndFound.model.CollectionResponseFoundReport.class);
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUserIp(java.lang.String userIp) {
          return (List) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.String cursor;

        /**

         */
        public java.lang.String getCursor() {
          return cursor;
        }

        public List setCursor(java.lang.String cursor) {
          this.cursor = cursor;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.Integer limit;

        /**

         */
        public java.lang.Integer getLimit() {
          return limit;
        }

        public List setLimit(java.lang.Integer limit) {
          this.limit = limit;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the LostReport collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code LostAndFound lostAndFound = new LostAndFound(...);}
   *   {@code LostAndFound.LostReport.List request = lostAndFound.lostReport().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public LostReport lostReport() {
    return new LostReport();
  }

  /**
   * The "lostReport" collection of methods.
   */
  public class LostReport {

    /**
     * Create a request for the method "lostReport.get".
     *
     * This request holds the parameters needed by the lostAndFound server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Get get(java.lang.Long id) throws java.io.IOException {
      Get result = new Get(id);
      initialize(result);
      return result;
    }

    public class Get extends LostAndFoundRequest<edu.gatech.cc.lostandfound.api.lostAndFound.model.LostReport> {

      private static final String REST_PATH = "lostReport/{id}";

      /**
       * Create a request for the method "lostReport.get".
       *
       * This request holds the parameters needed by the the lostAndFound server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Get(java.lang.Long id) {
        super(LostAndFound.this, "GET", REST_PATH, null, edu.gatech.cc.lostandfound.api.lostAndFound.model.LostReport.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public Get setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "lostReport.insert".
     *
     * This request holds the parameters needed by the lostAndFound server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link edu.gatech.cc.lostandfound.api.lostAndFound.model.LostReport}
     * @return the request
     */
    public Insert insert(edu.gatech.cc.lostandfound.api.lostAndFound.model.LostReport content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends LostAndFoundRequest<edu.gatech.cc.lostandfound.api.lostAndFound.model.LostReport> {

      private static final String REST_PATH = "lostReport";

      /**
       * Create a request for the method "lostReport.insert".
       *
       * This request holds the parameters needed by the the lostAndFound server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link edu.gatech.cc.lostandfound.api.lostAndFound.model.LostReport}
       * @since 1.13
       */
      protected Insert(edu.gatech.cc.lostandfound.api.lostAndFound.model.LostReport content) {
        super(LostAndFound.this, "POST", REST_PATH, content, edu.gatech.cc.lostandfound.api.lostAndFound.model.LostReport.class);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "lostReport.list".
     *
     * This request holds the parameters needed by the lostAndFound server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends LostAndFoundRequest<edu.gatech.cc.lostandfound.api.lostAndFound.model.CollectionResponseLostReport> {

      private static final String REST_PATH = "lostReport";

      /**
       * Create a request for the method "lostReport.list".
       *
       * This request holds the parameters needed by the the lostAndFound server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(LostAndFound.this, "GET", REST_PATH, null, edu.gatech.cc.lostandfound.api.lostAndFound.model.CollectionResponseLostReport.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String cursor;

      /**

       */
      public java.lang.String getCursor() {
        return cursor;
      }

      public List setCursor(java.lang.String cursor) {
        this.cursor = cursor;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Integer limit;

      /**

       */
      public java.lang.Integer getLimit() {
        return limit;
      }

      public List setLimit(java.lang.Integer limit) {
        this.limit = limit;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "lostReport.patch".
     *
     * This request holds the parameters needed by the lostAndFound server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param id
     * @param content the {@link edu.gatech.cc.lostandfound.api.lostAndFound.model.LostReport}
     * @return the request
     */
    public Patch patch(java.lang.Long id, edu.gatech.cc.lostandfound.api.lostAndFound.model.LostReport content) throws java.io.IOException {
      Patch result = new Patch(id, content);
      initialize(result);
      return result;
    }

    public class Patch extends LostAndFoundRequest<edu.gatech.cc.lostandfound.api.lostAndFound.model.LostReport> {

      private static final String REST_PATH = "lostReport/{id}";

      /**
       * Create a request for the method "lostReport.patch".
       *
       * This request holds the parameters needed by the the lostAndFound server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       * <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @param content the {@link edu.gatech.cc.lostandfound.api.lostAndFound.model.LostReport}
       * @since 1.13
       */
      protected Patch(java.lang.Long id, edu.gatech.cc.lostandfound.api.lostAndFound.model.LostReport content) {
        super(LostAndFound.this, "PATCH", REST_PATH, content, edu.gatech.cc.lostandfound.api.lostAndFound.model.LostReport.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public Patch setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "lostReport.remove".
     *
     * This request holds the parameters needed by the lostAndFound server.  After setting any optional
     * parameters, call the {@link Remove#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Remove remove(java.lang.Long id) throws java.io.IOException {
      Remove result = new Remove(id);
      initialize(result);
      return result;
    }

    public class Remove extends LostAndFoundRequest<Void> {

      private static final String REST_PATH = "lostReport/{id}";

      /**
       * Create a request for the method "lostReport.remove".
       *
       * This request holds the parameters needed by the the lostAndFound server.  After setting any
       * optional parameters, call the {@link Remove#execute()} method to invoke the remote operation.
       * <p> {@link
       * Remove#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Remove(java.lang.Long id) {
        super(LostAndFound.this, "DELETE", REST_PATH, null, Void.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Remove setAlt(java.lang.String alt) {
        return (Remove) super.setAlt(alt);
      }

      @Override
      public Remove setFields(java.lang.String fields) {
        return (Remove) super.setFields(fields);
      }

      @Override
      public Remove setKey(java.lang.String key) {
        return (Remove) super.setKey(key);
      }

      @Override
      public Remove setOauthToken(java.lang.String oauthToken) {
        return (Remove) super.setOauthToken(oauthToken);
      }

      @Override
      public Remove setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Remove) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Remove setQuotaUser(java.lang.String quotaUser) {
        return (Remove) super.setQuotaUser(quotaUser);
      }

      @Override
      public Remove setUserIp(java.lang.String userIp) {
        return (Remove) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public Remove setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Remove set(String parameterName, Object value) {
        return (Remove) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "lostReport.search".
     *
     * This request holds the parameters needed by the lostAndFound server.  After setting any optional
     * parameters, call the {@link Search#execute()} method to invoke the remote operation.
     *
     * @param q
     * @return the request
     */
    public Search search(java.lang.String q) throws java.io.IOException {
      Search result = new Search(q);
      initialize(result);
      return result;
    }

    public class Search extends LostAndFoundRequest<edu.gatech.cc.lostandfound.api.lostAndFound.model.CollectionResponseLostReport> {

      private static final String REST_PATH = "lostReport/search";

      /**
       * Create a request for the method "lostReport.search".
       *
       * This request holds the parameters needed by the the lostAndFound server.  After setting any
       * optional parameters, call the {@link Search#execute()} method to invoke the remote operation.
       * <p> {@link
       * Search#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param q
       * @since 1.13
       */
      protected Search(java.lang.String q) {
        super(LostAndFound.this, "GET", REST_PATH, null, edu.gatech.cc.lostandfound.api.lostAndFound.model.CollectionResponseLostReport.class);
        this.q = com.google.api.client.util.Preconditions.checkNotNull(q, "Required parameter q must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Search setAlt(java.lang.String alt) {
        return (Search) super.setAlt(alt);
      }

      @Override
      public Search setFields(java.lang.String fields) {
        return (Search) super.setFields(fields);
      }

      @Override
      public Search setKey(java.lang.String key) {
        return (Search) super.setKey(key);
      }

      @Override
      public Search setOauthToken(java.lang.String oauthToken) {
        return (Search) super.setOauthToken(oauthToken);
      }

      @Override
      public Search setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Search) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Search setQuotaUser(java.lang.String quotaUser) {
        return (Search) super.setQuotaUser(quotaUser);
      }

      @Override
      public Search setUserIp(java.lang.String userIp) {
        return (Search) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String q;

      /**

       */
      public java.lang.String getQ() {
        return q;
      }

      public Search setQ(java.lang.String q) {
        this.q = q;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String cursor;

      /**

       */
      public java.lang.String getCursor() {
        return cursor;
      }

      public Search setCursor(java.lang.String cursor) {
        this.cursor = cursor;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Integer limit;

      /**

       */
      public java.lang.Integer getLimit() {
        return limit;
      }

      public Search setLimit(java.lang.Integer limit) {
        this.limit = limit;
        return this;
      }

      @Override
      public Search set(String parameterName, Object value) {
        return (Search) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "lostReport.test".
     *
     * This request holds the parameters needed by the lostAndFound server.  After setting any optional
     * parameters, call the {@link Test#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Test test(java.lang.Long id) throws java.io.IOException {
      Test result = new Test(id);
      initialize(result);
      return result;
    }

    public class Test extends LostAndFoundRequest<Void> {

      private static final String REST_PATH = "lostReport/test/{id}";

      /**
       * Create a request for the method "lostReport.test".
       *
       * This request holds the parameters needed by the the lostAndFound server.  After setting any
       * optional parameters, call the {@link Test#execute()} method to invoke the remote operation. <p>
       * {@link Test#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Test(java.lang.Long id) {
        super(LostAndFound.this, "GET", REST_PATH, null, Void.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Test setAlt(java.lang.String alt) {
        return (Test) super.setAlt(alt);
      }

      @Override
      public Test setFields(java.lang.String fields) {
        return (Test) super.setFields(fields);
      }

      @Override
      public Test setKey(java.lang.String key) {
        return (Test) super.setKey(key);
      }

      @Override
      public Test setOauthToken(java.lang.String oauthToken) {
        return (Test) super.setOauthToken(oauthToken);
      }

      @Override
      public Test setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Test) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Test setQuotaUser(java.lang.String quotaUser) {
        return (Test) super.setQuotaUser(quotaUser);
      }

      @Override
      public Test setUserIp(java.lang.String userIp) {
        return (Test) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public Test setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Test set(String parameterName, Object value) {
        return (Test) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "lostReport.update".
     *
     * This request holds the parameters needed by the lostAndFound server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param id
     * @param content the {@link edu.gatech.cc.lostandfound.api.lostAndFound.model.LostReport}
     * @return the request
     */
    public Update update(java.lang.Long id, edu.gatech.cc.lostandfound.api.lostAndFound.model.LostReport content) throws java.io.IOException {
      Update result = new Update(id, content);
      initialize(result);
      return result;
    }

    public class Update extends LostAndFoundRequest<edu.gatech.cc.lostandfound.api.lostAndFound.model.LostReport> {

      private static final String REST_PATH = "lostReport/{id}";

      /**
       * Create a request for the method "lostReport.update".
       *
       * This request holds the parameters needed by the the lostAndFound server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       * <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @param content the {@link edu.gatech.cc.lostandfound.api.lostAndFound.model.LostReport}
       * @since 1.13
       */
      protected Update(java.lang.Long id, edu.gatech.cc.lostandfound.api.lostAndFound.model.LostReport content) {
        super(LostAndFound.this, "PUT", REST_PATH, content, edu.gatech.cc.lostandfound.api.lostAndFound.model.LostReport.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public Update setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the MyReports collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code LostAndFound lostAndFound = new LostAndFound(...);}
     *   {@code LostAndFound.MyReports.List request = lostAndFound.myReports().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public MyReports myReports() {
      return new MyReports();
    }

    /**
     * The "myReports" collection of methods.
     */
    public class MyReports {

      /**
       * Create a request for the method "myReports.list".
       *
       * This request holds the parameters needed by the lostAndFound server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @return the request
       */
      public List list() throws java.io.IOException {
        List result = new List();
        initialize(result);
        return result;
      }

      public class List extends LostAndFoundRequest<edu.gatech.cc.lostandfound.api.lostAndFound.model.CollectionResponseLostReport> {

        private static final String REST_PATH = "lostReport/myReports";

        /**
         * Create a request for the method "myReports.list".
         *
         * This request holds the parameters needed by the the lostAndFound server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @since 1.13
         */
        protected List() {
          super(LostAndFound.this, "GET", REST_PATH, null, edu.gatech.cc.lostandfound.api.lostAndFound.model.CollectionResponseLostReport.class);
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUserIp(java.lang.String userIp) {
          return (List) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.String cursor;

        /**

         */
        public java.lang.String getCursor() {
          return cursor;
        }

        public List setCursor(java.lang.String cursor) {
          this.cursor = cursor;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.Integer limit;

        /**

         */
        public java.lang.Integer getLimit() {
          return limit;
        }

        public List setLimit(java.lang.Integer limit) {
          this.limit = limit;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Notification collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code LostAndFound lostAndFound = new LostAndFound(...);}
   *   {@code LostAndFound.Notification.List request = lostAndFound.notification().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Notification notification() {
    return new Notification();
  }

  /**
   * The "notification" collection of methods.
   */
  public class Notification {

    /**
     * Create a request for the method "notification.registerToken".
     *
     * This request holds the parameters needed by the lostAndFound server.  After setting any optional
     * parameters, call the {@link RegisterToken#execute()} method to invoke the remote operation.
     *
     * @param token
     * @return the request
     */
    public RegisterToken registerToken(java.lang.String token) throws java.io.IOException {
      RegisterToken result = new RegisterToken(token);
      initialize(result);
      return result;
    }

    public class RegisterToken extends LostAndFoundRequest<Void> {

      private static final String REST_PATH = "token";

      /**
       * Create a request for the method "notification.registerToken".
       *
       * This request holds the parameters needed by the the lostAndFound server.  After setting any
       * optional parameters, call the {@link RegisterToken#execute()} method to invoke the remote
       * operation. <p> {@link RegisterToken#initialize(com.google.api.client.googleapis.services.Abstra
       * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param token
       * @since 1.13
       */
      protected RegisterToken(java.lang.String token) {
        super(LostAndFound.this, "GET", REST_PATH, null, Void.class);
        this.token = com.google.api.client.util.Preconditions.checkNotNull(token, "Required parameter token must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public RegisterToken setAlt(java.lang.String alt) {
        return (RegisterToken) super.setAlt(alt);
      }

      @Override
      public RegisterToken setFields(java.lang.String fields) {
        return (RegisterToken) super.setFields(fields);
      }

      @Override
      public RegisterToken setKey(java.lang.String key) {
        return (RegisterToken) super.setKey(key);
      }

      @Override
      public RegisterToken setOauthToken(java.lang.String oauthToken) {
        return (RegisterToken) super.setOauthToken(oauthToken);
      }

      @Override
      public RegisterToken setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RegisterToken) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RegisterToken setQuotaUser(java.lang.String quotaUser) {
        return (RegisterToken) super.setQuotaUser(quotaUser);
      }

      @Override
      public RegisterToken setUserIp(java.lang.String userIp) {
        return (RegisterToken) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String token;

      /**

       */
      public java.lang.String getToken() {
        return token;
      }

      public RegisterToken setToken(java.lang.String token) {
        this.token = token;
        return this;
      }

      @Override
      public RegisterToken set(String parameterName, Object value) {
        return (RegisterToken) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Reports collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code LostAndFound lostAndFound = new LostAndFound(...);}
   *   {@code LostAndFound.Reports.List request = lostAndFound.reports().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Reports reports() {
    return new Reports();
  }

  /**
   * The "reports" collection of methods.
   */
  public class Reports {

    /**
     * Create a request for the method "reports.sendNotification".
     *
     * This request holds the parameters needed by the lostAndFound server.  After setting any optional
     * parameters, call the {@link SendNotification#execute()} method to invoke the remote operation.
     *
     * @param message
     * @return the request
     */
    public SendNotification sendNotification(java.lang.String message) throws java.io.IOException {
      SendNotification result = new SendNotification(message);
      initialize(result);
      return result;
    }

    public class SendNotification extends LostAndFoundRequest<Void> {

      private static final String REST_PATH = "reports/{message}";

      /**
       * Create a request for the method "reports.sendNotification".
       *
       * This request holds the parameters needed by the the lostAndFound server.  After setting any
       * optional parameters, call the {@link SendNotification#execute()} method to invoke the remote
       * operation. <p> {@link SendNotification#initialize(com.google.api.client.googleapis.services.Abs
       * tractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param message
       * @since 1.13
       */
      protected SendNotification(java.lang.String message) {
        super(LostAndFound.this, "POST", REST_PATH, null, Void.class);
        this.message = com.google.api.client.util.Preconditions.checkNotNull(message, "Required parameter message must be specified.");
      }

      @Override
      public SendNotification setAlt(java.lang.String alt) {
        return (SendNotification) super.setAlt(alt);
      }

      @Override
      public SendNotification setFields(java.lang.String fields) {
        return (SendNotification) super.setFields(fields);
      }

      @Override
      public SendNotification setKey(java.lang.String key) {
        return (SendNotification) super.setKey(key);
      }

      @Override
      public SendNotification setOauthToken(java.lang.String oauthToken) {
        return (SendNotification) super.setOauthToken(oauthToken);
      }

      @Override
      public SendNotification setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (SendNotification) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public SendNotification setQuotaUser(java.lang.String quotaUser) {
        return (SendNotification) super.setQuotaUser(quotaUser);
      }

      @Override
      public SendNotification setUserIp(java.lang.String userIp) {
        return (SendNotification) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String message;

      /**

       */
      public java.lang.String getMessage() {
        return message;
      }

      public SendNotification setMessage(java.lang.String message) {
        this.message = message;
        return this;
      }

      @Override
      public SendNotification set(String parameterName, Object value) {
        return (SendNotification) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link LostAndFound}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link LostAndFound}. */
    @Override
    public LostAndFound build() {
      return new LostAndFound(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link LostAndFoundRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setLostAndFoundRequestInitializer(
        LostAndFoundRequestInitializer lostandfoundRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(lostandfoundRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
